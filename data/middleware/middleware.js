const jwt = require('jsonwebtoken');
const cloudinary = require('cloudinary');
const knex = require('knex');
const knexConfig = require('../../knexfile');
const db = knex(knexConfig.development);

function restricted(req, res, next) {
	const token = req.headers.authorization;
	if (token) {
		jwt.verify(token, process.env.JWT_SECRET, (err, decodedToken) => {
			if (err) {
				res.status(401).json({ message: 'Invalid Token' });
			} else {
				req.decodedToken = decodedToken;
				next();
			}
		});
	} else {
		res.status(404).json({ message: 'No token provided' });
	}
}

async function emailCheck(req, res, next) {
	const user = req.body;
	const userAccount = await db('users').where('email', user.email);
	const companyAccount = await db('companies').where('email', user.email);
	if (userAccount.length > 0 || companyAccount.length > 0) {
		res.status(400).json({ message: 'Email account alredy in use' });
	} else {
		// console.log('next');
		next();
	}
}

cloudinary.config({
	cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
	api_key: process.env.CLOUDINARY_API_KEY,
	api_secret: process.env.CLOUDINARY_SECRET
});

function imageProcess(res, req, next) {
	if (req.profileImg) {
		cloudinary.uploader
			.upload(req.profileImg)
			.then(image => {
				console.log();
				console.log('** File Upload (Promise)');
				console.log(
					"* public_id for the uploaded image is generated by Cloudinary's service."
				);
				console.log('* ' + image.public_id);
				console.log('* ' + image.url);
			})
			.catch(err => {
				console.log();
				console.log('** File Upload (Promise)');
				if (err) {
					console.warn(err);
				} else {
					res.profileImg = image.url;
					next();
				}
			});
	} else {
		next();
	}
}

module.exports = {
	restricted,
	emailCheck,
	imageProcess
};
